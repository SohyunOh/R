b <- 20
a <- "hello world"
a <- 10
a <- 3.14
# r의 연산자
a+b
a - b
a / b
a * b
a = b
a <- 3.14
a == b
a != b
a > b
a < b
# r에서는 여러값으로 구성된 변수 combine()
var1 <-  c(1,3,5,7,9)
var2 <-  c(1:100)
var2
var1
var2
var3 <- c("a","b","c","d")
var3
var4 <- c(1, "3")
var4
# 여러값으로 구성된 변수 seq()
seq(1,10)
# 여러값으로 구성된 변수 seq()
var5 <- seq(1,10)
var5
seq(1,10,2)
var6 <- seq(1,10, by = 2 )#(시작값, 끝값, step값)
var6
var7 = seq(2,10, by=2)
var7
#변수의 연산
var1 + 100
#변수의 연산
var1 + 10
var1 +var2
var1 + var7
#변수의 연산
var1 #
var7
var3 +10
remove(a)
remove(b)
#숫자형 변수
a <- 1
class(a)
a <-  3.14
class(a)
b <-  "1"
class(b)
c <-  c(1:10)
class(c)
class(d)
d <-TRUE
class(d)
#범주형 변수 factor()로 생성
factor(c(1,2,3,2,2,2,1,3))
#범주형 변수 factor()로 생성
e <-factor(c(1,2,3,2,2,2,1,3))
e
class(e)
levels(e)
f <- factor( c("a,","b","b","c"))
f
f <- factor( c("a","b","b","c"))
f
#타입 변환 함수 as.numeric(),
as.character(a)
as.character(c)
as.numeric(b)
as.factor(c)
as.Date("2020")
#as.Date("2020") # 문자열 -> 날짜
class( as.Date("2020-01-01"))
#객체형 데이터 타입
# vector
c(1,2,3,4,5)
c(1:10)
# dataframe - 여러타입이 합쳐진 2타원 구조
data.frame(a = c(1,2,3),
b = c("park", "hong", "kim"))
data.frame(a = c(1:3),
b = c("park", "hong"))
# 행렬(matrix) - 한가지 타입으로 만들어진 2차원 구조
matrix(c(1:6), nrow = 3, ncol = 2)#3행2열열
matrix(c(1:6), nrow = 2, ncol = 3)#2행3열
matrix(c(1:6), nrow = 3, ncol = 3)#모자란 경우 앞에 원소를 채워줍니다다
as.data.frame( matrix(c(1:6), nrow = 2, ncol = 3) )
#Array - 다차원 구조의 행렬
array( c(1:15), dim=c(3, 4, 3) ) #3행4열 3차원원
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), rnow = 3, ncol = 2) )
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), rnow = 3, ncol = 2) )
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), nrow = 3, ncol = 2) )
x <-  c(1:10)
x
sum(10)
sum(x)
mean(x)
max(x)
min(x)
median(x)
c(1,2,3,4,5,6)
c(1:10 ,11, 12:20)
c(1:10 ,NA, 12:20)
y <- c(1:10 ,NA, 12:20)
y
sum(y)
mean(y, na.rm = T )
sum(y, na.rm = T ) # 결측값은 제거하고 합계
#문자형 함수 nchar(), pasdte()
str1 <- "hello world"
str2 <- "my name id oh"
str3 <- c("a","b","c","d","e")
nchar(str1)
#문자열의 길이 확인
nchar(str1)
nchar(str2)
nchar(str3)
#문자열 붙이기 함수 paste()
paste(str1, str2)
str1 + 10
paste(str1, 10, str2)
paste(str1,str2, seq=",")
paste(str1,str2, seq="-")
paste(str1,str2, sep=",")
paste(str1,str2, sep="-")
paste(str3, sep=",")
paste(str3, collapse = ",")
#문자열 자르기 함수
str1
sustr(str1, 1,2)
subtr(str1, 1, 2)
substr(str1, 1, 2)
substr(str1, 7, nchar(str1))
str1_substr <- substr(str1, 1, 2)
#패키지 설치
install.packages("ggplot2")
.libPaths()
library(ggplot2)
library(ggplot2)
X <-  c(1,1,1,2,2,3,4,5)
qplt(x)
qplot(x)
#패키지에는 연습용 데이터가 존재
data(package = .packages(all.available = TRUE))
mpg
mpg <- as.data.frame(mpg)
mpg
class(mpg)
# qplot() 단순한 데이터 형태를 확인할 때 사용
qplot(data = mpg, x = hwy)
qplot(data = mpg, x = cty)
mpg
qplot(data = mpg, x = drv) #
qplot(data = mpg, x = drv , y = cty)
qplot(data = mpg, x = drv , y = class)
qplot(data = mpg, x = drv , y = cty , geom = "line" )
qplot(data = mpg, x = drv , y = cty , geom = "line" , color = dry )
qplot(data = mpg, x = drv , y = cty , geom = "line" , color = drv )
qplot(data = mpg, x = drv , y = cty , geom = "boxplot" , color = drv )
stut <- c(80, 54, 75,34, 90)
sum(stut)
mean(stut)
stut１<- sum(stut)
stut２<- mean(stut)
stut１
## 데이터 프레임 함수
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
library(ggplot2)
mpg<- as.data.frame(mpg)
mpg
mpg[3,]
mpg[3,] #3행 추출
mpg[15,]
mpg[1:6,]
mpg[c(1:6,8,10),]
mpg[,3]
mpg[,7]
mpg[,1:6]
mpg[,c(1:6, 8 , 10)]
mpg[,"model"]
mpg[,c("model","class")]
#인덱싱을 활용한 데이터 행열추출
#인덱싱을 활용한 데이터 행열추출
mpg[1,3]
#인덱싱을 활용한 데이터 행열추출
head(mpg)
mpg[c(1:4),c(2:3)]
mpg[c(1:3,4:6),c(2:3,4:5)]
mpg[1:3,2:3]
mpg[4:6, c(3,4,6)]
mpg[4:6, c("displ", "year", "trans")]
#데이터 프레임에서 컬럼이 1개인 경우에는  vector 형으로 결과가 나옵니다
mpg[1:3,1]
mpg[1:3, "model"]
mpg$model
mpg$year
mpg$class
mpg$class == "suv"
mpg[mpg$model == "a4"]
mpg[mpg$model == "a4",]
mpg[mpg$year >= 2000,]
head(mpg)
mpg[mpg$cty >= 20,]
mpg[mpg$cty >= 20 &  mpg$hwy >= 30 ,]
data.frame(c("item","price","num"),c("사과,1800,24")&c("딸기",1500,38)&c("수박",3000,13))
#문제1
sales <- data.frame(fruit = c("사과","딸기","수박"),
price = c(1800,1500,3000),
amount = c(24,38,13))
class(sales)
str(sales)
sum(sales$amount)
mean(sales$amount)
exam<- read.csv("data/excel_exam.csv", stringsAsFactors = T)
str(exam)
exam
exam[1,] <- 100 #첫행 변경
exam[c(1,3,5),] <-
exam[c(1,3,5),] <-100
head(exam)
#데이터 열 수정
exam[,4] <-50
head(exam)
#데이터 열 수정
exam[,"english"] <-70
head(exam)
#데이터 부분 수정하기
exam[10,"math"] <- 1000
exam[,6] <- "hrllo"
exam
head(exam)
nclo(exam)
ncol(exam)
ncol(exam) +1
exam[,ncol(exam)+1] <- "bye"
head(exam)
exam[,"XXX"] <- "abc"
head(exam)
exam$yyy <- "yyy"
head(exam)
#연습용
c(1:5)
source('D:/R/basic_r/code/01basic/script07(데이터프레임 _수정).R', encoding = 'UTF-8', echo=TRUE)
test[5]
head(exam)
#컬럼명의 수정 - colnames()
colnames(exam)[6] <-  "zzz"
head(exam)
exam[,-9]
exam$yyy <- "yyy"
head(exam)
colnames(exam)[7] <-  "kkk"
exam
#열 삭제 ex ) exam[,-9]
colnames(exam)[6:9] <- c("aaa","bbb","ccc","ddd")
head(exam)
colnames(exam)
colnames(exam) <- c("a","b","c","d","e","f","g","h","i")
head(exam)
#
colnames(exam)["i"] <- "test"
test <- c("aaa","bbb","ccc")
test["aaa"]
exam<- read.csv("data/excel_exam.csv")
exam
exam$math
exam$english
exam$science
exam$math + exam$english + exam$science
exam$total <- exam$math + exam$english + exam$science
exam$total
exam$avg <- (exam$math + exam$english + exam$science) /3
ifelse(exam$avg >=60, TRUE,FALSE)
# ifelse(exam$avg >=60, TRUE,FALSE)
exam$pass_fail <- ifelse(exam$avg >= 60, "Y","N")
exam
exam$level <-  ifelse(exam$avg <= 60,"row" &  exam$avg >= 60,"middle" & exam$avg >= 80, high )
exam$level <-  ifelse(exam$avg <= 60,"row" &  exam$avg >= 60,"middle" & exam$avg >= 80, "high" )
exam$level <-  ifelse(exam$avg <= 60,"row" &  exam$avg >= 60,"middle" & exam$avg >= 80, "high")
exam$level <-  ifelse(exam$avg <= 60,"row" & exam$avg >= 80, "high","middle" )
exam$level <-  ifelse(exam$avg >= 80, "high",
ifelse(exam$avg >=60,"middle","row"))
exam
library(ggplot2)
mpg <-as.data.frame(mpg)
mpg
aaa <- mpg[1:3, 1:4]
mpg[11:13, 1:4]
bbb <- mpg[11:13, 1:4]
aaa
bbb
cbind(aaa,bbb)#컬럼병합합
rbind(aaa,bbb)#행병합합
ccc <-  mpg[1:2, 1:5]
aaa
ccc
ddd <-  mpg[11:12, 1:4]
aaa
ddd <-  mpg[1:2, 1:4]
aaa
ddd
rbind(aaa,ddd)
ddd <-  mpg[1:3, 1:5]
rbind(aaa,ddd)
#열 데이터의 진도수
table(mpg$model)
table(mpg$year)
mpg
mpg
table(mpg$manufacturer)
table(mpg$manufacturer, mpg$year)
#hist(빈도수)
hist(table(mpg$year))
#hist(빈도수)
hist(table(mpg$year) )
table(mpg$year)
#hist(빈도수)
hist(table(mpg$year) )
#hist(빈도수)
hist(table(mpg$model) )
#hist(빈도수)
hist(table(mpg$model))
#hist(빈도수)
hist(table(mpg$model))
#hist(빈도수)
hist(table(mpg$year))
(
hist(table(mpg$model))
hist(table(mpg$model))
hist(table(mpg$model))
hist(table(mpg$manufacturer))
library(ggplot2)
mpg<- as.data.frame(mpg)
mpg<- as.data.frame(mpg)
mpg
mpg[,cty] <- city
mpg[,cty] <- "city"
mpg
mpg[,"cty"] <- "city"
mpg[,"hwy"] <- "highway"
mpg
mpg[,"cty"] <- city
mpg[,"city"] <- city
remove(mpg)
mpg<- as.data.frame(mpg)
mpg
mpg[,"cty"] <- city
mpg
mpg
mpg
colnames(mpg)[8] <-  "city"
colnames(mpg)[9] <-  "highway"
mpg
sum((mpg$city+mpg$highway)/2)
totla<- sum((mpg$city+mpg$highway)/2)
mpg[,ncol(mpg)+1] <- total
mpg[,ncol(mpg)+1] <- "total"
mpg
mpg[,ncol(mpg)-1] <- "total"
mpg
mpg[,ncol(mpg)-1]
remove(mpg)
mpg<- as.data.frame(mpg)
colnames(mpg)[8] <-  "city"
colnames(mpg)[9] <-  "highway"
totla<- sum((mpg$city+mpg$highway)/2)
mpg
mpg$totla<- sum((mpg$city+mpg$highway)/2)
mpg
mpg$totla<- sum((mpg$city+mpg$highway))
science
exam
exam$total <- exam$math + exam$english + exam$science
exam
mpg$totla<- (mpg$city+mpg$highway)
mpg$avg <-((mpg$city+mpg$highway)/2)
mpg
remove(mpg)
mpg<- as.data.frame(mpg)
colnames(mpg)[8] <-  "city"
colnames(mpg)[9] <-  "highway"
mpg$totla<- (mpg$city+mpg$highway)
mpg$avg <-((mpg$city+mpg$highway)/2)
remove(mpg)
mpg<- as.data.frame(mpg)
colnames(mpg)[8] <-  "city"
colnames(mpg)[9] <-  "highway"
mpg$total<- (mpg$city+mpg$highway)
mpg$avg <-((mpg$city+mpg$highway)/2)
mpg
mpg$test <- ifelse(mpg$total >=20 ,"PASS","FAIL")
mpg
ifelse( mpg$total >=20, "PASS" ,"FAIL")
mpg
mpg$grade <- ifelse(mpg$total >=24 ,
ifelse(mpg$total >=20, "PASS" ,"FAIL"))
mpg$grade <- ifelse(mpg$total >=24 ,"A",
ifelse(mpg$total >=20, "PASS" ,"FAIL"))
mpg
mpg
View(aaa)
# Q1. ggplot2 패키지의 mpg데이터를 사용할 수 있도록 불러온 뒤 복사본을 만드세요.
library(ggplot2)
temp<- as.data.frame(mpg)
# • Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.
colnames(temp)[8] <-  "city"
colnames(temp)[9] <-  "highway"
# • Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
temp$total<- (temp$city+mpg$highway)
# • Q4. 컬럼 total의 평균을 출력하세요.
temp$avg <-((temp$city+temp$highway)/2)
# • Q5. total에 따른 파생변수 test를 생성합니다. (조건: total >= 20 이상 PASS 나머지 FAIL )
temp$grade <- ifelse(temp$total >=20, "PASS" ,"FAIL")
# • Q6. total에 따른 파생변수 grade를 생성합니다. (24이상 A, 20이상 B, 나머지는 C )
temp$grade <- ifelse(temp$total >=24 ,"A",
ifelse(temp$total >=20, "PASS" ,"FAIL"))
temp
head(temp)
# • Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
temp$total<- ((temp$city+mpg$highway)/2)
# • Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
temp$total<- (temp$city+mpg$highway)/2
remove(mpg)
(temp)
temp<- as.data.frame(mpg)
# • Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.
colnames(temp)[8] <-  "city"
colnames(temp)[9] <-  "highway"
# • Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
temp$total<- (temp$city+mpg$highway)/2
head(temp)
# • Q3. 복사본 데이터를 이용해서 cty + hwy / 2의 total컬럼을만드세요.
temp$total<- (temp$city+temp$highway)/2
head(temp)
# • Q4. 컬럼 total의 평균을 출력하세요.
temp$avg <- mean(temp$total)
head(temp)
# • Q6. total에 따른 파생변수 grade를 생성합니다. (24이상 A, 20이상 B, 나머지는 C )
temp$grade <- ifelse(temp$total >=24 ,"A",
ifelse(temp$total >=20, "B" ,"C"))
temp
head(temp,6)
data(package = .packages(all.available = TRUE))
library(ggplot2)
midwest
?midwest
temp2<- as.data.frame(midwest)
temp2<-data.frame(midwest)
head(temp2)
colnames(temp)[5] <-  "total"
colnames(temp)[10] <-  "asian"
head(temp2,10)
head(temp2)
colnames(temp2)[5] <-"total"
colnames(temp2)[10] <-"asian"
head(temp2)
View(temp)
# ggplot2 패키지에는 미국 동북중부 437개 지역의 인구통계 정보를 담은 midwest라는 데이터가 포함되어
# 있습니다. midwest 데이터를 사용해 데이터 분석 문제를해결해보세요.
data(package = .packages(all.available = TRUE))
library(ggplot2)
midwest
temp2<-data.frame(midwest)
colnames(temp2)[5] <-"total"
colnames(temp2)[10] <-"asian"
head(temp2)
temp2$asintotal <- (temp2$asian/temp2$total)/100
hist(temp2$asintotal)
temp2$asianAvg<- mean(temp2$asintotal)
asintotal
temp2$asianAvg
temp
temp2
temp2
temp2$group <- ifelse( temp2$asianAvg <= temp2$asintotal , "large" ,small)
temp2$group <- ifelse( temp2$asianAvg <= temp2$asintotal , "large" ,"small")
temp2
head(temp2$group)
#table()함수는 데이터의 빈도를 보여준다.
table(midwest$group)
#table()함수는 데이터의 빈도를 보여준다.
table(temp2$group)
#숫자 문자를 동시에 저장하면 문자형으로 변경
var4 <- c(1, "3")
var4
# 여러값으로 구성된 변수 seq()
var5 <- seq(1,10)
var5
var6 <- seq(1,10, by = 2 )#(시작값, 끝값, step값)
var6
var7 = seq(2, 10, by = 2)#2~10까지 2씩 증가
var7
var7 <-  seq(2, 10, by = 2)#2~10까지 2씩 증가
var7
var6 <- seq(1,10, by = 2 )#(시작값, 끝값, step값)#  2  3  4  5  6  7  8  9 10
var6

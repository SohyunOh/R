"Hello world"
x = "Hello world"
"Hello world"
'hello'
1
#  <- (화살표)단축키 : alt + -
a <- 1
b <- 20
a <- "hello world"
a <- 10
a <- 3.14
# r의 연산자
a+b
a - b
a / b
a * b
a = b
a <- 3.14
a == b
a != b
a > b
a < b
# r에서는 여러값으로 구성된 변수 combine()
var1 <-  c(1,3,5,7,9)
var2 <-  c(1:100)
var2
var1
var2
var3 <- c("a","b","c","d")
var3
var4 <- c(1, "3")
var4
# 여러값으로 구성된 변수 seq()
seq(1,10)
# 여러값으로 구성된 변수 seq()
var5 <- seq(1,10)
var5
seq(1,10,2)
var6 <- seq(1,10, by = 2 )#(시작값, 끝값, step값)
var6
var7 = seq(2,10, by=2)
var7
#변수의 연산
var1 + 100
#변수의 연산
var1 + 10
var1 +var2
var1 + var7
#변수의 연산
var1 #
var7
var3 +10
remove(a)
remove(b)
#숫자형 변수
a <- 1
class(a)
a <-  3.14
class(a)
b <-  "1"
class(b)
c <-  c(1:10)
class(c)
class(d)
d <-TRUE
class(d)
#범주형 변수 factor()로 생성
factor(c(1,2,3,2,2,2,1,3))
#범주형 변수 factor()로 생성
e <-factor(c(1,2,3,2,2,2,1,3))
e
class(e)
levels(e)
f <- factor( c("a,","b","b","c"))
f
f <- factor( c("a","b","b","c"))
f
#타입 변환 함수 as.numeric(),
as.character(a)
as.character(c)
as.numeric(b)
as.factor(c)
as.Date("2020")
#as.Date("2020") # 문자열 -> 날짜
class( as.Date("2020-01-01"))
#객체형 데이터 타입
# vector
c(1,2,3,4,5)
c(1:10)
# dataframe - 여러타입이 합쳐진 2타원 구조
data.frame(a = c(1,2,3),
b = c("park", "hong", "kim"))
data.frame(a = c(1:3),
b = c("park", "hong"))
# 행렬(matrix) - 한가지 타입으로 만들어진 2차원 구조
matrix(c(1:6), nrow = 3, ncol = 2)#3행2열열
matrix(c(1:6), nrow = 2, ncol = 3)#2행3열
matrix(c(1:6), nrow = 3, ncol = 3)#모자란 경우 앞에 원소를 채워줍니다다
as.data.frame( matrix(c(1:6), nrow = 2, ncol = 3) )
#Array - 다차원 구조의 행렬
array( c(1:15), dim=c(3, 4, 3) ) #3행4열 3차원원
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), rnow = 3, ncol = 2) )
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), rnow = 3, ncol = 2) )
# list - 모든 요소를 담는 다차원 구조
list( a = c(1:5),
b = data.frame( a = c(1,2,3), b = c("kim","lee","choi") ),
c = matrix( c(1:6), nrow = 3, ncol = 2) )
x <-  c(1:10)
x
sum(10)
sum(x)
mean(x)
max(x)
min(x)
median(x)
c(1,2,3,4,5,6)
c(1:10 ,11, 12:20)
c(1:10 ,NA, 12:20)
y <- c(1:10 ,NA, 12:20)
y
sum(y)
mean(y, na.rm = T )
sum(y, na.rm = T ) # 결측값은 제거하고 합계
#문자형 함수 nchar(), pasdte()
str1 <- "hello world"
str2 <- "my name id oh"
str3 <- c("a","b","c","d","e")
nchar(str1)
#문자열의 길이 확인
nchar(str1)
nchar(str2)
nchar(str3)
#문자열 붙이기 함수 paste()
paste(str1, str2)
str1 + 10
paste(str1, 10, str2)
paste(str1,str2, seq=",")
paste(str1,str2, seq="-")
paste(str1,str2, sep=",")
paste(str1,str2, sep="-")
paste(str3, sep=",")
paste(str3, collapse = ",")
#문자열 자르기 함수
str1
sustr(str1, 1,2)
subtr(str1, 1, 2)
substr(str1, 1, 2)
substr(str1, 7, nchar(str1))
str1_substr <- substr(str1, 1, 2)
#패키지 설치
install.packages("ggplot2")
.libPaths()
library(ggplot2)
library(ggplot2)
X <-  c(1,1,1,2,2,3,4,5)
qplt(x)
qplot(x)
#패키지에는 연습용 데이터가 존재
data(package = .packages(all.available = TRUE))
mpg
mpg <- as.data.frame(mpg)
mpg
class(mpg)
# qplot() 단순한 데이터 형태를 확인할 때 사용
qplot(data = mpg, x = hwy)
qplot(data = mpg, x = cty)
mpg
qplot(data = mpg, x = drv) #
qplot(data = mpg, x = drv , y = cty)
qplot(data = mpg, x = drv , y = class)
qplot(data = mpg, x = drv , y = cty , geom = "line" )
qplot(data = mpg, x = drv , y = cty , geom = "line" , color = dry )
qplot(data = mpg, x = drv , y = cty , geom = "line" , color = drv )
qplot(data = mpg, x = drv , y = cty , geom = "boxplot" , color = drv )
stut <- c(80, 54, 75,34, 90)
sum(stut)
mean(stut)
stut１<- sum(stut)
stut２<- mean(stut)
stut１

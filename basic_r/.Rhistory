select(id,math) %>%
arrange(desc(math))
mutate(data, total = math + english+ science)
d1 <- mutate(data, total = math + english+ science)
d1
#여러행을 한번에 생성하기
mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
test="hello")
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
test="hello")
d2
(data, total = math + english+ science)
d1 <- mutate(data, total = math + english+ science)
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
aaa="hello")
d2
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
test="hello")
d2
d1 <- mutate(data, total = math + english+ science)
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
aaa="hello")
d2
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
test="hello")
#기존 의 열 추출방법(기존에 dataset 이 변함)
data$test <- data$math +data$english
d1 <- mutate(data, total = math + english+ science)
#여러행을 한번에 생성하기
d2 <- mutate(data, totla = math+english+science,
avg =  (math+english+science) /3,
aaa="hello")
d2
#조건에 따른 파생변수 추가
mudata( d2 , exam_result = ifelse(avg >=60, "pass","fail"))
#조건에 따른 파생변수 추가
mutata( d2 , exam_result = ifelse(avg >=60, "pass","fail"))
#조건에 따른 파생변수 추가
mutate( d2 , exam_result = ifelse(avg >=60, "pass","fail"))
#파이프라인으로 한번에 작성하기
data <- read.csv("data/excel_exam.csv")
data
data %>%
mutate(data, total = math+english+science,
avg = (math+english+science)/3,
exam_result = ifselse(avg >= avg >=60, "pass","fail"))
data %>%
mutate(data, total = math+english+science,
avg = (math+english+science)/3,
exam_result = ifselse(avg >=60, "pass","fail"))
data %>%
mutate(data, total = math+english+science,
avg = (math+english+science)/3,
)
mutate (exam_result = ifselse(avg >=60, "pass","fail")
data %>%
mutate(data, total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate (exam_result = ifselse(avg >=60, "pass","fail"))
data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate (exam_result = ifselse(avg >=60, "pass","fail"))
data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate (exam_result = ifselse(avg >=60, "pass","fail")) %>%
filter(exam_result == "pass")
#파이프라인으로 한번에 작성하기 (tatal,avg, exam_result)변수
data <- read.csv("data/excel_exam.csv")
data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate (exam_result = ifselse(avg >=60, "pass","fail")) %>%
filter(exam_result == "pass")
data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate(exam_result = ifselse(avg >=60, "pass","fail")) %>%
filter(exam_result == "pass")
result <- data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate(exam_result = ifselse(avg >=60, "pass","fail")) %>%
filter(exam_result == "pass")
result <- data %>%
mutate(total = math+english+science,
avg = (math+english+science)/3 ) %>%
mutate(exam_result = ifelse(avg >=60, "pass","fail")) %>%
filter(exam_result == "pass")
result
# gglplot2에 있는 mpg 데이터를 사용합니다.
library(ggplot2)
mpg <- data.frame(mpg)
mpg %>%
select(class, cty)
str(mpg)
mpg %>%
select(class, cty) %>%
filter(class == c("suv","compact") ) %>%
select(cty)
mpg %>%
select(class, cty) %>%
filter(class == c("suv","compact") )
x1 <- mpg %>%
select(class, cty)
x1
x1 %>%
select(class, cty) %>%
filter(class == c("suv","compact") ) %>%
select(cty)
x1 %>%
select(class, cty) %>%
filter(class == c("suv","compact") ) %>%
select(class,cty)
x1 %>%
select(class, cty) %>%
filter(class == c("suv","compact") ) %>%
select(class,cty)
str(mpg)
mpg %>%
filter(manufacturer == "audi")
mpg %>%
filter(manufacturer == "audi") %>%
select(hwy)
# Q2. audi에서 생산한 자동차 중에 중 hwy가 1~5위에 해당하는 자동차의 (제조사, 모델, 년도, hwy)데이터만 출력하세요.
str(mpg)
mpg %>%
filter(manufacturer == "audi") %>%
filter(head(,5)) %>%
select(manufacturer,model , year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
filter(head(5)) %>%
select(manufacturer,model , year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
filter(head(hwy,5)) %>%
select(manufacturer,model , year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
filter(hwy = head(,5)) %>%
select(manufacturer,model , year,hwy)
select(manufacturer,model , year,hwy)
# Q2. audi에서 생산한 자동차 중에 중 hwy가 1~5위에 해당하는 자동차의 (제조사, 모델, 년도, hwy)데이터만 출력하세요.
str(mpg)
mutate(hwy)
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy)
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy,5)
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy)
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy = head(,5))
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy = head(hwy,5))
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy = 5)
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
mutate(hwy == 5)
mpg %>%
filter(manufacturer == "audi") %>%
select(hwy) %>%
select(manufacturer,model ,year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
mutate(hwy = head(,5)) %>%
select(manufacturer,model ,year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
mutate(hwy = head()) %>%
select(manufacturer,model ,year,hwy)
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
temp <- data.frame(mpg)
temp %>%
mutate(sum = cty+hwy)
temp <- temp %>%
mutate(sum = cty+hwy)
sum <- temp %>%
mutate(sum = cty+hwy)
avg <- temp %>%
mutate(avg = sum /2)
temp <- temp %>%
mutate(avg = sum /2)
temp
temp <- temp %>%
mutate(sum = cty+hwy)
temp <- temp %>%
mutate(avg = sum /2)
temp %>%
select(avg)
temp %>%
select(desc(avg))
temp %>%
arrange(desc(avg))
temp %>%
arrange(avg)
temp %>%
arrange(desc(avg))
mpg %>%
filter(manufacturer == "audi") %>%
arrange(hwy = head()) %>%
select(manufacturer,model ,year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
arrange(hwy )%>%
select(manufacturer,model ,year,hwy)
mpg %>%
filter(manufacturer == "audi") %>%
arrange( desc(hwy) )%>%
select(manufacturer,model ,year,hwy)
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
mpg <- data.frame(mpg)
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg))%>%
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg))%>%
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg))%>%
mpg
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg))
mpg
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
filter(avg >= "high", "row")
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
mutate(mpg_result = ifelse(avg >= "high", "row"))
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
mutate(avg = ifelse(avg >= "high", "row"))
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
mutate(avg = ifelse(avg >=, "high", "row"))
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
mutate(avg = ifelse(avg >= , "high", "row"))
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg)) %>%
mutate(avg = ifelse(avg >= 35, "high", "row"))
mpg
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg), head(5)) %>%
mutate(avg = ifelse(avg >= 35, "high", "row"))
mpg
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg) = head(5)) %>%
mutate(avg = ifelse(avg >= 35, "high", "row"))
temp %>%
arrange(desc(avg), head(5))
temp <- head(5)
temp
temp
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg) , head(5)) %>%
mutate(avg = ifelse(avg >= 35, "high", "row"))
mpg
head(mpg,5)
head(temp,5)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
temp <-
temp %>%
arrange(desc(avg))
head(temp,5)
# • Q3. '평균 연비 변수'가 가장 높은 자동차 5순위 데이터를 출력.
temp <-
temp %>%
arrange(desc(avg))
head(temp,5)
temp <- temp %>%
arrange(desc(avg))
temp %>%
head( arrange(desc(avg)),5)
temp %>%
arrange(desc(avg))
temp <- temp %>%
mutate(avg = sum /2)
temp %>%
arrange(desc(avg))
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
mpg <- data.frame(mpg)
temp <- data.frame(mpg)
temp <- temp %>%
mutate(sum = cty+hwy)
temp <- temp %>%
mutate(avg = sum /2)
temp %>%
arrange(desc(avg))
mpg_d1 <- mpg %>%
select(class, cty)  %>%
filter(class == c("suv","compact") )
head(mpg_d1,10)
mpg_d2 <-
mpg %>%
filter(manufacturer == "audi") %>%
arrange( desc(hwy) )%>%
select(manufacturer,model ,year,hwy)
head(mpg_d2,5)
table(mpg$manufacturer)
mpg_d2 <-
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
arrange( desc(hwy) )
head(mpg_d2,5)
mpg_d2 <-
mpg %>%
filter(manufacturer == "audi") %>%
select(manufacturer,model ,year,hwy) %>%
arrange( desc(hwy) ) %>%
head(5)
mpg_d2
# • Q1. mpg 데이터 복사본을 만들고, cty 와 hwy 를 더한 '합산 연비 변수'를 추가.
mpg_c <- mpg
mpg_c <- mpg_c %>%
mutate(sum = cty+hwy)
mpg_c %>%
arrange(desc(avg))
mpg_c <-
mpg_c %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg) ) %>%
mutate(avg = ifelse(avg >= 35, "high", "row")) %>%
head(5)
mpg_c
mpg_c %>%
arrange(desc(avg)) %>%
head(5)
arrange(desc(avg),head(5))
mpg <-
mpg %>%
mutate(sum = cty+hwy) %>%
mutate(avg = sum /2) %>%
arrange(desc(avg) ) %>%
mutate(avg = ifelse(avg >= 35, "high", "row")) %>%
head(5)
mpg
mpg <-
mpg %>%
mutate(sum = cty+hwy,
avg = sum/2,
result = ifelse(avg >= 35, "high", "row")) %>%
arrange(desc(avg) ) %>%
head(5)
mpg_c2 <-
mpg %>%
mutate(sum = cty+hwy,
avg = sum/2,
result = ifelse(avg >= 35, "high", "row")) %>%
arrange(desc(avg) ) %>%
head(5)
mpg_c2
data <- read.csv("data/excel_exam.csv")
data
summarise(data, sum_math = sum(math))
summarise(data, sum_math = sum(math), #합계계
avg_math = mean(math), #평균
count = n()) #빈도수
d1<- summarise(data, sum_math = sum(math), #합계계
avg_math = mean(math), #평균
count = n()) #빈도수
d1
class(d1)
is.data.frame(d1) #데이터 프레임 입니까?
is.list(d1)
mean(data$math)
group_by(data, class)
d2 <- group_by(data, class)
d2
summarise(d2, math_sum = sum(math))
summarise(d2, math_sum = sum(math),
eng_sum = sum(english),
sci_sum = sum(sciense))
summarise(d2, math_sum = sum(math),
eng_sum = sum(english),
sci_sum = sum(science),
total = n())
summarise(d2, math_avg = mean(math),
eng_avg = mean(english),
sci_avg = mean(science))
#클래스별, 수학, 영어, 과학의 평균를 요약
summarise(d2, math_avg = mean(math),
eng_avg = mean(english),
sci_avg = mean(science),
math_medi = median(math),
eng_medi = median(english),
sci_medi = median(science))
#파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math))
#파이프라인으로 한번에 작성
data %>%
group_by(class) %>%
summarise( math_sum = sum(math),
math_avg = mean(math),
total = n())
table(mpg$manufacturer)
table(mpg$drv)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
#여러개를 그룹핑 시키려면 group_by() dp tnstjeofh wjrdmaus ehlqslek.
mpg <- as.data.frame(mpg)
table(mpg$manufacturer)
table(mpg$drv)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result
class(result)
mpg <- data.frame(mpg)
#여러개를 그룹핑 시키려면 group_by() dp tnstjeofh wjrdmaus ehlqslek.
mpg <- as.data.frame(mpg)
table(mpg$manufacturer)
table(mpg$drv)
result <- mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty),
mean_hwy = mean(hwy))
result
as.data.frame(result)
mpg
#여러개를 그룹핑 시키려면 group_by() dp tnstjeofh wjrdmaus ehlqslek.
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
mpg <- data.frame(mpg)
mpg
#여러개를 그룹핑 시키려면 group_by() dp tnstjeofh wjrdmaus ehlqslek.
library(ggplot2)
#여러개를 그룹핑 시키려면 group_by() dp tnstjeofh wjrdmaus ehlqslek.
library(ggplot2)
mpg <- as.data.frame(mpg)
mpg
#제조사병, 모델의 개수
result2 <- mpg %>%
group_by(manufacturer, model) %>%
summarise(total = n())
as.data.frame(result2)
